@page "/orders"
@using LocalBusinessDirectory.Data.Orders;
@using LocalBusinessDirectory.Helpers;
@attribute [Authorize]

@inject IOrderData orderData

<PageTitle>Your Orders | NearMe</PageTitle>

<div class="px-12 py-8">
    <h1 class="text-3xl mb-4">Your Orders</h1>
    <div class="flex pb-4 border-b mb-8">
        <div class="relative block mt-2 text-sm mr-4">
            <span class="absolute inset-y-0 left-0 flex items-center pl-4 text-neutral-400">
                <i class="fa-solid fa-store"></i>
            </span>
            <input @bind="name" @bind:event="oninput" @bind:after="Filter" class="placeholder:text-neutral-600 block bg-white w-full border border-b-black/10 rounded-full py-2 pl-10 pr-1 focus:outline-none focus:border-green-300 focus:ring-green-300/50 focus:ring-2 transition" placeholder="Name" aria-label="Search by name" />
        </div>
        <div class="flex items-center group font-bold text-sm uppercase select-none group relative" tabindex="0">
            <div class="cursor-pointer">
                <i class="fa-solid fa-filter mr-2"></i>
                Filter
            </div>
            <div class="absolute opacity-0 top-8 shadow right-0 rounded bg-white flex flex-col whitespace-nowrap z-50 pointer-events-none transition duration-200 group-focus-within:opacity-100 group-focus-within:pointer-events-auto py-4 text-xs">
                <div class="font-bold uppercase mb-2 px-2">Status</div>

                @foreach (var status in Enum.GetValues<OrderStatus>())
                {
                    <label class="px-4 py-2 transition duration-200 flex items-center hover:bg-gray-300 cursor-pointer">
                        <input type="checkbox" class="w-4 h-4 accent-green-400 mr-2" checked="@(statuses.Contains(status))" @oninput="() => ToggleStatus(status)" />
                        @status.ToFormattedString()
                    </label>
                }
            </div>
        </div>
    </div>
    <div class="min-h-70">
        @if (filteredOrders is not null)
        {
            @if (filteredOrders.Count == 0)
            {
                @if (orders!.Count == 0)
                {
                    <div class="text-center flex flex-col items-center justify-center">
                        <div class="mb-4">
                            You have not ordered anything yet.
                        </div>
                        <a class="bg-green-600 whitespace-nowrap w-min text-white rounded-lg p-2 text-center transition hover:bg-green-700" href="/catalog"><i class="fa-solid fa-magnifying-glass mr-2"></i> View our catalog</a>
                    </div>
                }
                else
                {
                    <p>No orders could be found. Try broadening your search criteria.</p>
                }
            }
            else
            {
                <div class="grid grid-cols-3 gap-8">
                    @foreach (var order in filteredOrders)
                    {
                        <OrderDisplay Order="order" />
                    }
                </div>
            }
        }
    </div>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthState { get; set; }

    private List<Order>? orders;
    private List<Order>? filteredOrders;
    private string? name;

    private List<OrderStatus> statuses = new();

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState!;

        orders = await orderData.GetOrdersByUser(state.User.Identity!.Name!);
        Filter();
    }

    private void Filter()
    {
        filteredOrders = orders?.Where(o =>
            (string.IsNullOrEmpty(name) || o.Offer!.Name.Contains(name)) &&
            (statuses.Count == 0 || statuses.Contains(o.Status)))
            .ToList();
    }

    private void ToggleStatus(OrderStatus status)
    {
        if (statuses.Contains(status))
        {
            statuses.Remove(status);
        }
        else
        {
            statuses.Add(status);
        }

        Filter();
    }
}
