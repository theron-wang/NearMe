@using LocalBusinessDirectory.Data.Orders;
@using LocalBusinessDirectory.Helpers;
@inject NavigationManager nav
@inject IOrderData orderData

@if (Order is not null && Order.Offer is not null)
{
    <div class="bg-green-50 shadow rounded-lg p-8 flex transition hover:bg-green-100">
        <div class="h-48 max-h-48 w-1/4 min-w-1/4 overflow-hidden">
            <a href="/business/@Order.Offer.BusinessId?product=@Order.Offer.Id">
                <img src="images/@Order.Offer.ImageUrl" class="rounded-lg h-full object-cover" />
            </a>
        </div>
        <div class="max-h-48 overflow-hidden px-8 flex-1 flex flex-col">
            <div class="font-bold mb-3 text-lg">
                <a href="/business/@Order.Offer.BusinessId?product=@Order.Offer.Id">@Order.Offer.Name</a>
            </div>
            <div class="mb-4 flex items-center text-black/80">
                Offered by:&nbsp;<a href="/business/@Order.Offer.BusinessId">@Order.BusinessName</a>
            </div>
            <div class="font-bold flex items-center">
                @if (Order.IsDiscounted)
                {
                    @:$@((Order.PriceWhenBought * 0.85m).ToString("0.00"))
                    <span class="line-through text-sm mx-2">$@Order.PriceWhenBought.ToString("0.00")</span>

                    <span class="text-xs text-white p-1 bg-red-800 rounded flex items-center w-min"><i class="fa-solid fa-money-bill mr-1"></i> Discount</span>
                }
                else
                {
                    @:$@Order.PriceWhenBought.ToString("0.00")
                }
            </div>
            <div class="@(Order.Status == OrderStatus.Fulfilled ? "text-green-800" : (Order.Status == OrderStatus.Cancelled ? "text-red-800" : ""))">
                @Order.Status.ToFormattedString()
            </div>
            <a class="bg-green-600 w-min text-white rounded-lg py-3 px-6 mt-auto whitespace-nowrap text-center transition hover:bg-green-700" href="/business/@Order.Offer.BusinessId?product=@Order.Offer.Id">Order again</a>
        </div>
        <div class="flex items-start gap-4">
            @if (Order.Status == OrderStatus.Fulfilled)
            {
                <a href="/business/@Order.Offer.BusinessId?product=@Order.Offer.Id" title="View @Order.Offer.Type.ToString().ToLower()"><i class="fa-solid fa-eye"></i></a>
                <a href="/business/@Order.Offer.BusinessId?product=@Order.Offer.Id" title="Leave a rating"><i class="fa-regular fa-star"></i></a>
                <a href="/business/@Order.Offer.BusinessId" title="Browse seller"><i class="fa-solid fa-store"></i></a>
            }
            else if (Order.Status == OrderStatus.Cancelled)
            {
                <a href="/business/@Order.Offer.BusinessId?product=@Order.Offer.Id" title="View @Order.Offer.Type.ToString().ToLower()"><i class="fa-solid fa-eye"></i></a>
                <a href="/business/@Order.Offer.BusinessId" title="Browse seller"><i class="fa-solid fa-store"></i></a>
            }
            else
            {
                <a href="/business/@Order.Offer.BusinessId?product=@Order.Offer.Id" title="View @Order.Offer.Type.ToString().ToLower()"><i class="fa-solid fa-eye"></i></a>
                <a href="/business/@Order.Offer.BusinessId?product=@Order.Offer.Id" title="Leave a rating"><i class="fa-regular fa-star"></i></a>
                <button title="Cancel" @onclick="Cancel"><i class="fa-solid fa-ban"></i></button>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public Order? Order { get; set; }

    private async Task Cancel()
    {
        Order!.Status = OrderStatus.Cancelled;

        await orderData.Update(Order);
    }
}
