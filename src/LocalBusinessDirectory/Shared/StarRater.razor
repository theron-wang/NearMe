@inject IRater rater

<div class="flex items-center fill-yellow-500 gap-x-2 text-yellow-500" aria-label="@Stars stars">
    @for (int i = 1; i <= 5; i++)
    {
        int copy = i;

        <button @onmouseover="() => HoverStars(copy)" @onmouseout="Unlock" @onclick="() => Rate(copy)">
            @if (i <= starsDisplay)
            {
                <span>
                    <i class="fa-solid fa-star"></i>
                </span>
            }
            else
            {
                <span>
                    <i class="fa-regular fa-star"></i>
                </span>
            }
        </button>
    }
</div>

@code {
    [Parameter]
    public double Stars { get; set; }
    [Parameter]
    public string? RelatedTo { get; set; }
    [Parameter]
    public Action<int>? Callback { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState>? AuthState { get; set; }

    private double starsDisplay;
    private bool lockHover;

    protected override void OnParametersSet()
    {
        Stars = Math.Round(Stars);
        starsDisplay = Stars;
    }

    private void HoverStars(int stars)
    {
        if (lockHover == false)
        {
            starsDisplay = stars;
            lockHover = true;
        }
    }

    private void Unlock()
    {
        lockHover = false;
    }

    private async Task Rate(int stars)
    {
        var auth = await AuthState!;

        starsDisplay = stars;
        Stars = stars;

        await rater.Rate(auth.User.Identity!.Name!, RelatedTo!, stars);

        if (Callback is not null)
        {
            Callback(stars);
        }
    }
}
